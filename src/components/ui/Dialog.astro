---
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
    id,
    title,
    width = 985,
    class: className,
    ...props
} = Astro.props;
---

<!-- How to open -->
<!-- <button onclick={`window.${id}?.showModal()`}>Открыть</button> -->

<dialog 
    id={id}
    class:list={["dialog", className]}
    role="dialog" 
    aria-modal="true"
    aria-labelledby={`dialog-${id}-title`}
    {...props}
>
    <header class="dialog__header">
        <span class="dialog__title h3" id={`dialog-${id}-title`}>{title}</span>
        <form method="dialog" class="dialog__close-form">
            <button 
                type="submit"
                class="button-close" 
                aria-label={t("common.Закрыть")}
            >
                <svg role="presentation" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </form>
    </header>
    <div class="dialog__body">
        <slot />
    </div>
</dialog>

<script>
    import dialogPolyfill from 'dialog-polyfill';
    
    document.addEventListener("DOMContentLoaded", () => {
        init();
    });

    function init() {
        const dialogList = document.querySelectorAll('dialog');
        const isOutsideClick = (element, event) => {
            const rect = element.getBoundingClientRect();
            const result = (event.clientY < rect.top
                || event.clientY > rect.bottom
                || event.clientX < rect.left
                || event.clientX > rect.right);
            return result;
        }

        if (!dialogList.length) {
            return;
        }

        [...dialogList].forEach((dialog) => {
            dialogPolyfill.registerDialog(dialog);

            dialog.addEventListener('click', (event) => {
                if (isOutsideClick(dialog, event)){
                    dialog.close();
                }
            });
        });
    }
</script>

<style lang="scss" define:vars={{ width }}>
    @keyframes animate-top {
        from {
            transform: translate(0, -5vh);
            opacity:0
        } 
        to {
            transform: translate(0, 0);
            opacity:1
        }
    }
    .dialog {
        --color-product: var(--color-product-primego);
        --color-product-hover: var(--color-product-primego-hover);
        --color-product-active: var(--color-product-primego-active);
        --button-text-color: var(--color-white);

        --text-color: var(--color-white);
        --text-product: var(--color-product);
        --text-lead: var(--color-white);

        --dialog-gutter: var(--60px);
        --dialog-width: var(--width);
    }
    .dialog {
        position: fixed;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
        display: block;
        left: 0;
        right: 0;
        max-height: calc(100vh - var(--90px));
		width: calc(var(--1px) * var(--dialog-width));
		max-width: calc(100vw - var(--gutter) *2);
        margin: var(--90px) auto auto;
        padding: 0;
        background-color: var(--color-bg-disabled);
        //box-shadow: 0px 8px 16px -7px var(--color-product);
        box-shadow: 0px var(--8px) var(--15px) calc(var(--8px) * -1) rgba(252,20,71,.45);
        border: none;
        animation-name: animate-top;
        animation-duration: 0.4s;
        color: var(--text-color);

        &:not([open]) {
            display: none
        }

        &::backdrop,
        & + .backdrop {
            position: fixed;
            top: 0px;
            right: 0px;
            bottom: 0px;
            left: 0px;
            // background: linear-gradient(267.46deg, var(--color-product) 1.33%, rgb(0, 0, 0) 97.51%);
            // filter: saturate(0.7);
            background: linear-gradient(267.46deg, #8C1630 1.33%, #000 97.51%);
            opacity: .65;
        }
    }
    body:has(dialog[open]) {
        overflow: hidden;
    }
    .dialog__header {
        padding: var(--dialog-gutter) var(--dialog-gutter) var(--45px);
        position: relative;
        background-color: var(--color-bg-disabled);
        box-shadow: 0 -1px 0 1px var(--color-bg-disabled);
        position: sticky;
        z-index: 1;
        top: 0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    .dialog__body {
        margin: 0 var(--dialog-gutter) var(--dialog-gutter);
    }
    .dialog__title {
        margin: 0;
        color: var(--color-product);
    }
    .dialog__close-form {
        flex-shrink: 0;
        margin: calc(var(--dialog-gutter)* -1) calc(var(--dialog-gutter)* -1) 0 0;
    }
    .button-close {
        color: #C9C8D3;
        padding: 
            calc(var(--30px) + calc(var(--1px) * 6)) 
            var(--dialog-gutter) 
            var(--30px) 
            var(--30px);
        background: none;
        border: none;
        cursor: pointer;
        transition: color 0.15s ease;
        
        &:hover {
            color: var(--color-product);
        }
    }
    @media screen and (max-width: 1023px) {
        .dialog {
            --dialog-gutter: var(--15px);
        }
		.dialog {
		    max-width: 100vw;
            max-height: 100%;
            margin: 0;
		}
        .dialog__header {
            padding: var(--dialog-gutter);
        }
        .dialog__title {
            word-break: break-word;
            font-size: calc(var(--1px) * 20);
        }
        .button-close {
            padding: var(--15px) var(--15px) 0 var(--15px);
            & :global(svg) {
                width: calc(var(--1px) * 24);
                width: calc(var(--1px) * 24);
            }
        }
	}
</style>