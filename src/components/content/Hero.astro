---
import "@splidejs/splide/css/core";
import { Image } from "astro:assets";
import Section from "../ui/Section.astro";
import StarTrekText from "../ui/StarTrekText.astro";
import Button from "../ui/Button.astro";
import imgSlide1 from "/src/assets/img/hero-slider/slide-1.png";
import imgSlide2 from "/src/assets/img/hero-slider/slide_2.png";
import imgSlide3 from "/src/assets/img/hero-slider/slide_3.png";
import BackgroundText from "../ui/BackgroundText.astro";

const imageList = [
	imgSlide1, imgSlide2, imgSlide3, imgSlide2
];
const { backgroundImage } = Astro.props;
---

<Section backgroundImage={backgroundImage}>
	<BackgroundText>Primego</BackgroundText>
	<div class="hero-layout">
		<div class="hero">
			<StarTrekText as="h1" class="page-title">Primego</StarTrekText>
			<div>
				<p class="lead">Стиль и&nbsp;инновации</p>
				<p>
					Наша обувь способна вдохновлять и&nbsp;очаровывать аудиторию по&nbsp;всему миру. 
					Создай свой образ с&nbsp;помощью констуктора
				</p>
				<Button as="button" onclick="alert('disabled')">
					Создать образ
				</Button>
			</div>
		</div>
		<div class="heroSlider-wrapper">
			<div class="splide" role="group" aria-hidden="true">
				<div class="splide__track">
					<ul class="splide__list">
						{
							imageList.map((item) => (
								<li class="splide__slide">
									<Image
										src={item}
										class="splide__img"
										alt=""
										loading="lazy"
									/>
								</li>
							))
						}
					</ul>
				</div>
			</div>
			<div class="heroSlider__dots" data-splide-progress>
				<svg width="550" height="741" viewBox="0 0 480 741" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M388.998 806C606.996 301 214.496 -5.50024 0.542179 -22.7933" stroke="url(#gradient-back)" stroke-width="3"/>
					<path stroke-dasharray="20 20" d="M388.998 806C606.996 301 214.496 -5.50024 0.542179 -22.7933" stroke="url(#gradient-front)" stroke-width="3"/>

					<circle r="10" cx="342" cy="189" fill="#C5C0DB" class="circle"></circle>
					<circle r="10" cx="431" cy="367" fill="#C5C0DB" class="circle"></circle>
					<circle r="10" cx="452" cy="565" fill="#C5C0DB" class="circle"></circle> 

					<g style="transform: translate(-5%, -5%);">
						<circle r="23" cx="23" cy="32" fill="#FC1447" class="circle"></circle>
						<path d="M22.5646 32.0297L38.2226 0.371718C38.3366 0.143718 38.6736 0.223725 38.6796 0.469725L38.8426 12.5807C38.8446 12.7577 39.0236 12.8747 39.1866 12.8137L53.6945 7.32672C53.9325 7.23772 54.1236 7.52172 53.9596 7.71072L44.3916 18.4167C44.2456 18.5787 44.3616 18.8327 44.5716 18.8397L56.8226 19.1517C57.0886 19.1577 57.1456 19.5197 56.8956 19.6137L22.8656 32.3567C22.6596 32.4337 22.4686 32.2287 22.5646 32.0297Z" fill="white"/>
					    <!-- ToDo rotate="auto" починить -->
						<animateMotion
							dur="2000ms"
							repeatCount="indefinite"
							rotate="0"
							path="M343,189 Q470,367 451,565 Q470,367 343,189"
						></animateMotion>
					</g>

					<defs>
						<linearGradient id="gradient-back" gradientTransform="rotate(90)">
							<stop offset="10%" stop-color="#ffffff" stop-opacity="0"/>
							<stop offset="20%" stop-color="#ffffff" stop-opacity="0.2"/>
							<stop offset="80%" stop-color="#ffffff" stop-opacity="0.2"/>
							<stop offset="90%" stop-color="#ffffff" stop-opacity="0"/>
						</linearGradient>
						
						<linearGradient id="gradient-front" gradientTransform="rotate(90)">
							<stop offset="10%" stop-color="#ffffff" stop-opacity="0"/>
							<stop offset="20%" stop-color="#ffffff" stop-opacity="1"/>
							<stop offset="80%" stop-color="#ffffff" stop-opacity="1"/>
							<stop offset="90%" stop-color="#ffffff" stop-opacity="0"/>
						</linearGradient>
					</defs>
				</svg>
			</div>
		</div>
	</div>
</Section>

<style lang="scss">
	.section {
		min-height: calc(var(--section-height) - var(--header-height));
	}
</style>
<style lang="scss" is:global>
	.page-title {
		margin-bottom: var(--size-90);
		font-size: var(--heading-1);
	}
	.hero-layout {
		display: flex;
		margin-bottom: calc(var(--adaptive-pixel) * 150);
	}
	.hero {
		min-width: 40%;
	}
	.heroSlider-wrapper {
		display: flex;
		align-self: flex-end;
		margin-left: calc(var(--adaptive-pixel) * 60 * -1);
		position: relative;
	}
	.heroSlider__dots {
		position: absolute;
		height: 150%;
		right: 0;
		top: -20%;
		transform: rotate(6deg);
		pointer-events: none;
		svg {
			height: 100%;
			transform: translate(32%, -15%);
		}
	}

	@media screen and (max-width: 1023px) {
		.hero {
			min-width: auto;
			text-align: center;
		}
		.hero-layout {
			margin-bottom: calc(var(--adaptive-pixel) * 90);
			flex-direction: column;
		}
		.page-title {
			font-size: calc(var(--adaptive-pixel) * 128);
			margin-top: calc(var(--adaptive-pixel) * 36);
			margin-bottom: var(--size-30);
		}
		.heroSlider-wrapper {
			margin: var(--size-30) 0;
		}
		.heroSlider__dots {
			top: -46%;
			transform: rotate(86deg);
		}
	}
</style>

<script>
	import Splide from "@splidejs/splide/dist/js/splide.min.js";

	window.onload = function() {
		const pagination = document.querySelector('[data-splide-progress] svg');
		pagination?.pauseAnimations();
	};

	document.addEventListener("DOMContentLoaded", () => {
		const pagination = document.querySelector('[data-splide-progress] svg');

		var splide = new Splide(".splide", {
			type: "fade",
			rewind: true,
   			pauseOnHover: false,
			lazyLoad: "nearby",
			autoplay: true,
			interval: 5000,
			pagination: false,
			arrows: false
		});
		splide.mount();

		splide.on('move', () => {
			pagination?.unpauseAnimations();
			setTimeout(()=>pagination?.pauseAnimations(), 500);
		});

		splide.on('click', throttle(() => {
			const nexSlideIndex = splide.Components.Controller.getNext(true);
			splide.go(nexSlideIndex);
		}, 2000 / 4));

		function throttle(func, delay) {
			let wait = false;

			return (...args) => {
				if (wait) {
					return;
				}

				func(...args);
				wait = true;
				setTimeout(() => {
				wait = false;
				}, delay);
			}
		}
	});
</script>

<style lang="scss">
	.splide {
		& :global(.splide__img) {
			transform: rotate(-15deg);
		}
		& :global(.splide__arrows) {
			position: absolute;
			bottom: var(--size-200);
			display: flex;
			width: 100%;
			justify-content: space-between;
			z-index: 2;
		}
		& :global(.splide__arrow) {
			background: none;
			border: none;
			cursor: pointer;
		}
		& :global(.splide__track) {
			margin: 0 var(--size-60);
			overflow: visible;
		}

		& :global(svg) {
			fill: var(--color-white);
			width: calc(var(--adaptive-pixel) * 35);
			height: calc(var(--adaptive-pixel) * 35);
		}
		& :global(.splide__arrow--prev) {
			transform: scale(-1);
		}
		& :global(.splide__arrow--next) {
		}
	}

	@media screen and (max-width: 1023px) {
		.splide {
			& :global(.splide__track) {
				margin: 0;
			}
		}
	}

</style>
